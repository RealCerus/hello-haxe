// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_3_main,"Main","main",0xed0e206e,"Main.main","Main.hx",3,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_19_print,"Main","print",0x44be9e58,"Main.print","Main.hx",19,0x087e5c05)
static const ::String _hx_array_data_332f6459_4[] = {
	HX_(" ",20,00,00,00),
};

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x332f6459;
}

void Main_obj::main(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_3_main)
HXLINE(   4)		::Array< ::String > args = ::Sys_obj::args();
HXLINE(   5)		::String path = HX_(".",2e,00,00,00);
HXLINE(   7)		if ((args->length != 0)) {
HXLINE(   8)			path = args->__get((args->length - 1));
            		}
HXLINE(  11)		if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE(  12)			path = HX_(".",2e,00,00,00);
            		}
HXLINE(  15)		::haxe::Log_obj::trace(((HX_("Printing files in directory ",5a,ed,4e,ea) + path) + HX_(":",3a,00,00,00)),hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),15,HX_("Main",59,64,2f,33),HX_("main",39,38,56,48)));
HXLINE(  16)		::Main_obj::print(null(),path);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

void Main_obj::print(hx::Null< int >  __o_offset,::String __o_startPath){
            		int offset = __o_offset.Default(0);
            		::String startPath = __o_startPath;
            		if (hx::IsNull(__o_startPath)) startPath = HX_(".",2e,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_19_print)
HXLINE(  20)		 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  21)		{
HXLINE(  21)			int _g = 0;
HXDLIN(  21)			while((_g < offset)){
HXLINE(  21)				_g = (_g + 1);
HXDLIN(  21)				{
HXLINE(  21)					if (hx::IsNotNull( buf->charBuf )) {
HXLINE(  21)						buf->flush();
            					}
HXDLIN(  21)					if (hx::IsNull( buf->b )) {
HXLINE(  21)						buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_332f6459_4,1);
            					}
            					else {
HXLINE(  21)						buf->b->push(HX_(" ",20,00,00,00));
            					}
            				}
            			}
            		}
HXLINE(  23)		{
HXLINE(  23)			int _g2 = 0;
HXDLIN(  23)			::Array< ::String > _g3 = ::sys::FileSystem_obj::readDirectory(startPath);
HXDLIN(  23)			while((_g2 < _g3->length)){
HXLINE(  23)				::String path = _g3->__get(_g2);
HXDLIN(  23)				_g2 = (_g2 + 1);
HXLINE(  24)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  24)				::String _hx_tmp1 = (buf->toString() + path);
HXDLIN(  24)				_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),24,HX_("Main",59,64,2f,33),HX_("print",2d,58,8b,c8)));
HXLINE(  25)				bool _hx_tmp2;
HXDLIN(  25)				if (!(::sys::FileSystem_obj::isDirectory((startPath + path)))) {
HXLINE(  25)					_hx_tmp2 = ::sys::FileSystem_obj::isDirectory(path);
            				}
            				else {
HXLINE(  25)					_hx_tmp2 = true;
            				}
HXDLIN(  25)				if (_hx_tmp2) {
HXLINE(  26)					::String _hx_tmp3;
HXDLIN(  26)					if (::sys::FileSystem_obj::isDirectory((startPath + path))) {
HXLINE(  26)						_hx_tmp3 = (startPath + path);
            					}
            					else {
HXLINE(  26)						_hx_tmp3 = path;
            					}
HXDLIN(  26)					::Main_obj::print((offset + 3),(_hx_tmp3 + HX_("/",2f,00,00,00)));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Main_obj,print,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = print_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	HX_("print",2d,58,8b,c8),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

